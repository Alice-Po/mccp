---
import Layout from "../layouts/Layout.astro";
import SidebarZAE from "../components/SidebarZAE.svelte";
---

<Layout title="Cartes du territoire">
  <main>

    <section class="map-section with-sidebar">
      <!-- Sidebar Svelte hydrat√©e -->
      <SidebarZAE client:load categories={[]} opened={false} />
      <div id="map" class="map-container" aria-label="Carte des communes d√©l√©gu√©es"></div>
      <button id="filterFab" class="fab" aria-label="Ouvrir les filtres">üîç Filtres</button>
    </section>
  </main>

  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""
  />

  <script
    is:inline
    src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
    crossorigin=""
  ></script>
  <!-- Reprojection pour couches additionnelles (ZAE en EPSG:2154) -->
  <script
    is:inline
    src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.9.2/proj4.js"
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  ></script>

  <script is:inline>
    window.addEventListener('load', () => {
      if (!window.L) return;

      const PRIMARY = getComputedStyle(document.documentElement).getPropertyValue('--primary')?.trim() || '#2e8b57';
      const SECONDARY = getComputedStyle(document.documentElement).getPropertyValue('--secondary')?.trim() || '#1b365d';

      const map = L.map('map', {
        scrollWheelZoom: true,
        attributionControl: true
      });

      // Ajuster la hauteur de la section carte pour √©viter le double scroll
      const sectionEl = document.querySelector('.map-section');
      function headerHeight() {
        const hdr = document.querySelector('.site-header') || document.querySelector('header');
        return hdr ? hdr.offsetHeight : 0;
      }
      function resizeMapSection() {
        if (!sectionEl) return;
        const h = Math.max(320, window.innerHeight - headerHeight());
        sectionEl.style.height = h + 'px';
        // Laisser le layout s'appliquer avant de recalculer la taille Leaflet
        setTimeout(() => { try { map.invalidateSize(); } catch (_) {} }, 50);
      }
      resizeMapSection();
      window.addEventListener('resize', resizeMapSection);

      // Fond de carte plus riche en libell√©s (CARTO Voyager)
      const baseTiles = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png', {
        maxZoom: 19,
        attribution: '&copy; OpenStreetMap contributors, &copy; <a href="https://carto.com/attributions">CARTO</a>'
      }).addTo(map);

      // Calque de libell√©s par-dessus (reste lisible au-dessus des polygones)
      map.createPane('labels');
      map.getPane('labels').style.zIndex = 650; // au-dessus des overlays
      map.getPane('labels').style.pointerEvents = 'none';

      // Charger en parall√®le les g√©om√©tries et les donn√©es habitants
      Promise.all([
        fetch('/assets/datas/geojson/Putanges_wgs84.geojson').then(r => r.json()),
        fetch('/assets/datas/geojson/donnees-communes.json').then(r => r.ok ? r.json() : {}).catch(() => ({}))
      ])
        .then(([gj, rawData]) => {

          // Construire un index nom normalis√© -> { population, annee }
          const index = new Map();
          try {
            const list = Array.isArray(rawData?.communes) ? rawData.communes : [];
            for (const item of list) {
              const nom = item.nom || item.NOM;
              const popVal = item.population?.valeur ?? item.population;
              const popAnnee = item.population?.annee ?? item.annee;
              if (!nom) continue;
              index.set(String(nom).trim().toLowerCase(), { population: popVal, annee: popAnnee });
            }
          } catch (_) {}

          const baseStyle = {
            color: PRIMARY,
            weight: 2,
            opacity: 1,
            fillColor: PRIMARY,
            fillOpacity: 0.08
          };

          const highlightStyle = {
            weight: 3,
            fillOpacity: 0.15
          };

          // Dessiner les polygones dans un pane sous les labels
          map.createPane('polygons');
          map.getPane('polygons').style.zIndex = 640; // sous les labels (650)
          const layer = L.geoJSON(gj, {
            style: () => baseStyle,
            pane: 'polygons',
            onEachFeature: (feature, lyr) => {
              const nom = feature?.properties?.NOM || 'Secteur';
              // Libell√© discret au survol, on laisse les libell√©s OSM natifs visibles
              lyr.bindTooltip(nom, { sticky: true, direction: 'top', className: 'leaflet-tooltip-custom' });
              lyr.on('mouseover', () => lyr.setStyle(highlightStyle));
              lyr.on('mouseout', () => lyr.setStyle(baseStyle));
              lyr.on('click', () => {
                const key = String(nom).trim().toLowerCase();
                const info = index.get(key);
                const popFmt = (v) => (typeof v === 'number' && v.toLocaleString) ? v.toLocaleString('fr-FR') : (v ?? '');
                const popLine = (info && info.population) ? `<br/>Habitants: <strong>${popFmt(info.population)}</strong>${info.annee ? ` <small>(r√©f. ${info.annee})</small>` : ''}` : '';
                lyr.bindPopup(`<strong>${nom}</strong>${popLine}`).openPopup();
              });
            }
          }).addTo(map);

          layer.eachLayer(l => { l.getElement?.()?.style && (l.getElement().style.cursor = 'pointer'); });

          try {
            const bounds = layer.getBounds();
            // Vue plus ajust√©e: plus de padding et zoom max plafonn√©
            map.fitBounds(bounds, { padding: [40, 40], maxZoom: 13 });
            // S'assurer que la carte occupe tout l'espace disponible une fois pr√™te
            map.whenReady(() => setTimeout(() => map.invalidateSize(), 0));
          } catch (e) {
            map.setView([48.787, -0.197], 12);
          }

          // --- Couche ZAE (EPSG:2154 -> 4326) + Sidebar de filtrage ---
          try {
            map.createPane('overlays');
            map.getPane('overlays').style.zIndex = 645; // entre polygones et labels

            fetch('/assets/datas/geojson/ZAE.geojson')
              .then(r => r.json())
              .then(zae => {
                if (!window.proj4 || !zae) return;
                // D√©finition Lambert-93
                proj4.defs('EPSG:2154', '+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +units=m +no_defs');
                const from = proj4('EPSG:2154');
                const to = proj4('EPSG:4326');
                function tCoords(c){ if(typeof c[0]==='number'){ const [x,y]=c; const [lon,lat]=proj4(from,to,[x,y]); return [lon,lat]; } return c.map(tCoords); }
                function tGeom(g){ return { ...g, coordinates: tCoords(g.coordinates) }; }
                const zaeWgs = (zae.type==='FeatureCollection') ? { ...zae, features: zae.features.map(f=>({ ...f, geometry: tGeom(f.geometry) })) } : zae;

                const zaeStyle = {
                  color: SECONDARY,
                  weight: 1.5,
                  opacity: 0.9,
                  fillColor: PRIMARY,
                  fillOpacity: 0.2
                };
                const zaeLayer = L.geoJSON(zaeWgs, {
                  style: () => zaeStyle,
                  pane: 'overlays',
                  onEachFeature: (f, lyr) => {
                    const p = f.properties || {};
                    const title = p.TOPONYME || p.NATURE || p.CATEGORIE || '√âl√©ment';
                    const lines = [
                      p.CATEGORIE ? `<div><small>${p.CATEGORIE}${p.NATURE ? ' ¬∑ '+p.NATURE : ''}${p.NAT_DETAIL ? ' ¬∑ '+p.NAT_DETAIL : ''}</small></div>` : ''
                    ].join('');
                    // Libell√© permanent au centre
                    lyr.bindTooltip(title, { permanent: true, direction: 'center', className: 'leaflet-label-zae' });
                    lyr.bindPopup(`<strong>${title}</strong>${lines}`);
                    // Stocke la cat√©gorie sur le layer pour filtrage
                    lyr.featureCategory = p.CATEGORIE || 'Autres';
                  }
                }).addTo(map);

                // Construire la liste de cat√©gories
                const catSet = new Set();
                zaeWgs.features.forEach(f => { const c = f.properties?.CATEGORIE; if (c) catSet.add(c); });
                const cats = Array.from(catSet).sort();
                // Alimenter le composant Svelte et √©couter les filtres
                const sidebarEl = document.querySelector('aside.sidebar');
                window.dispatchEvent(new CustomEvent('zae:mount', { detail: { categories: cats } }));
                window.addEventListener('zae:filter', (e) => {
                  const actives = e.detail?.actives || new Set(cats);
                  zaeLayer.eachLayer(l => {
                    const show = actives.has(l.featureCategory);
                    l.setStyle({ opacity: show?0.9:0, fillOpacity: show?0.2:0 });
                    if (show) { l.addTo(map); } else { l.removeFrom(map); }
                  });
                });

                // Bouton mobile pour ouvrir/fermer via le composant
                const fab = document.getElementById('filterFab');
                fab.addEventListener('click', ()=>{
                  sidebarEl?.classList.toggle('open');
                  setTimeout(() => map.invalidateSize(), 150);
                });

                // R√©agir aux toggles internes du composant pour recalculer la taille
                window.addEventListener('zae:toggle', ()=> setTimeout(() => map.invalidateSize(), 150));
              })
              .catch(() => {});
          } catch (_) {}
        })
        .catch(() => {
          map.setView([48.787, -0.197], 11);
        });
    });
  </script>

  <style>
    :global(html, body) {
      height: 100%;
      overflow: hidden; /* emp√™che le scroll de page, carte immersive */
    }
    main{
        margin: 0;
        max-width: none;
        padding: 0;
        height: 100dvh;
    }
    .map-section {
      max-width: none;
      margin: 0;
      padding: 0 0.75rem;
      position: relative;
      display: grid;
      grid-template-columns: 300px 1fr;
      gap: 0.75rem;
      height: 100dvh;
      align-items: stretch;
    }

    .map-container {
      width: 100%;
      height: 100%;
      min-height: 420px;
      border-radius: 0.75rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      overflow: hidden;
      background: #fff;
    }

    .sidebar {
      background: #fff;
      border-radius: 0.75rem;
      box-shadow: 0 4px 6px rgba(0,0,0,0.05);
      overflow: hidden;
      border: 1px solid rgba(0,0,0,0.06);
      height: 100%;
      display: flex;
      flex-direction: column;
    }
    .sidebar-header {
      display: flex;
      align-items: center;
      gap: .5rem;
      padding: .5rem .75rem;
      border-bottom: 1px solid rgba(0,0,0,0.06);
    }
    .sidebar-header h2 { font-size: 1rem; margin: 0; }
    #toggleSidebar { background: var(--primary); color:#fff; border:none; border-radius:.5rem; padding:.3rem .5rem; cursor:pointer; }
    .sidebar-body { padding: .75rem; overflow:auto; }
    .filter-group h3 { margin:.25rem 0 .5rem; font-size:.95rem; color: var(--secondary); }
    .cat-item { display:flex; align-items:center; gap:.5rem; margin:.25rem 0; font-size:.95rem; }

    .fab {
      position: absolute;
      right: 1.25rem;
      bottom: 1.25rem;
      background: var(--primary);
      color: #fff;
      border: none;
      border-radius: 999px;
      box-shadow: 0 6px 12px rgba(0,0,0,0.15);
      padding: .6rem 1rem;
      cursor: pointer;
      display: none; /* desktop: cach√© */
      z-index: 705;
      font-weight: 600;
    }

    /* Harmoniser les tooltips avec le th√®me */
    .leaflet-tooltip-custom {
      background: #fff;
      color: var(--secondary);
      border: 1px solid rgba(46, 139, 87, 0.3);
      box-shadow: 0 2px 6px rgba(0,0,0,0.08);
      border-radius: 6px;
      font-family: var(--font-main);
      font-weight: 500;
    }

    /* Libell√©s permanents pour la couche ZAE */
    .leaflet-label-zae {
      background: rgba(255,255,255,0.85);
      color: var(--secondary);
      border: 1px solid rgba(27,54,93,0.25);
      border-radius: 4px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
      font-family: var(--font-main);
      font-size: 0.8rem;
      font-weight: 600;
      padding: 0.1rem 0.3rem;
    }

    /* RWD */
    @media (max-width: 768px) {
      .map-section { grid-template-columns: 1fr; height: calc(100dvh - 80px); padding: 0; }
      .sidebar { position:absolute; left:1rem; right:1rem; top:0; height:auto; max-height:70dvh; transform: translateY(-110%); transition: transform .2s ease; z-index: 700; }
      .sidebar.open { transform: translateY(0); }
      .map-container { height: 100%; }
      .fab { display: inline-flex; align-items:center; gap:.4rem; }
    }
  </style>
</Layout>


