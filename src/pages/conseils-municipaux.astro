---
import Layout from '../layouts/Layout.astro';
import DocumentArborescence from '../components/DocumentArborescence.svelte';
import PdfViewer from '../components/PdfViewer.svelte';
---

<Layout title="Conseils Municipaux - MCCP">
  <main class="conseils-main">
    <!-- Bandeau informatif -->
    <div class="info-banner" id="infoBanner">
      <div class="banner-content">
        <span class="banner-text">
          Nous essayons d'être à jour avec les comptes-rendus. 
          La source officielle est : 
          <a href="https://www.putanges-le-lac.fr/?page_id=1378" target="_blank" rel="noopener noreferrer">
            www.putanges-le-lac.fr
          </a>
          . Si un document est manquant, merci de nous le signaler.
        </span>
        <button class="banner-close" id="bannerClose" aria-label="Fermer le bandeau">
          ✕
        </button>
      </div>
    </div>
    
    <!-- Container deux colonnes -->
    <div class="conseils-container" id="conseilsContainer">
      <!-- Colonne 1 : Arborescence des documents -->
      <div class="arborescence-column" id="arborescenceColumn">
        <DocumentArborescence client:load />
      </div>
      
      <!-- Colonne 2 : Viewer PDF -->
      <div class="viewer-column" id="viewerColumn">
        <PdfViewer client:load />
      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    let isMobileViewerMode = false;
    
    // Gestion du bandeau informatif
    const infoBanner = document.getElementById('infoBanner') as HTMLElement | null;
    const bannerClose = document.getElementById('bannerClose') as HTMLButtonElement | null;
    const conseilsContainer = document.getElementById('conseilsContainer') as HTMLElement | null;
    
    // Vérifier si le bandeau a été fermé précédemment
    const bannerClosed = localStorage.getItem('infoBannerClosed');
    if (bannerClosed === 'true' && infoBanner) {
      infoBanner.style.display = 'none';
      adjustContainerHeight();
    }
    
    // Écouter le clic sur le bouton de fermeture
    if (bannerClose && infoBanner) {
      bannerClose.addEventListener('click', () => {
        if (infoBanner) {
          infoBanner.style.display = 'none';
          localStorage.setItem('infoBannerClosed', 'true');
          adjustContainerHeight();
        }
      });
    }
    
    // Ajuster la hauteur du conteneur principal
    function adjustContainerHeight() {
      if (conseilsContainer && infoBanner) {
        const bannerHeight = infoBanner.style.display === 'none' ? 0 : infoBanner.offsetHeight;
        conseilsContainer.style.height = `calc(100vh - ${bannerHeight}px)`;
        conseilsContainer.style.minHeight = `calc(100vh - ${bannerHeight}px)`;
      }
    }
    
    // Ajuster la hauteur au chargement
    adjustContainerHeight();

    // Fonction pour vérifier si on est en mode mobile
    function isMobile() {
      return window.innerWidth <= 768;
    }

    // Fonction pour basculer entre arborescence et viewer en mobile
    function toggleMobileView(showViewer = false) {
      const container = document.getElementById('conseilsContainer');
      const arborescenceColumn = document.getElementById('arborescenceColumn');
      const viewerColumn = document.getElementById('viewerColumn');

      if (!container || !arborescenceColumn || !viewerColumn) return;

      if (isMobile()) {
        if (showViewer) {
          // Mode viewer : cacher arborescence, montrer viewer
          container.classList.add('mobile-viewer-mode');
          arborescenceColumn.classList.add('mobile-hidden');
          viewerColumn.classList.add('mobile-visible');
          isMobileViewerMode = true;
        } else {
          // Mode arborescence : montrer arborescence, cacher viewer
          container.classList.remove('mobile-viewer-mode');
          arborescenceColumn.classList.remove('mobile-hidden');
          viewerColumn.classList.remove('mobile-visible');
          isMobileViewerMode = false;
        }
      }
    }

    // Écouter le retour depuis le viewer mobile
    document.addEventListener('mobileBackToArborescence', () => {
      console.log('📡 Page - Retour à l\'arborescence mobile');
      toggleMobileView(false);
    });

    // Écouter la sélection de documents depuis DocumentArborescence
    document.addEventListener('documentSelected', (event: any) => {
      console.log('📡 Page - Événement documentSelected reçu:', event);
      const doc = event.detail?.doc;
      console.log('📡 Page - Document extrait:', doc);
      
      if (doc && doc.name) {
        console.log('📡 Page - Traitement document:', doc.name);
        
        // Construire l'URL du PDF
        const pdfUrl : string = doc.path;
        console.log('📡 Page - URL PDF:', pdfUrl);
        
        // En mobile, basculer vers le viewer
        if (isMobile()) {
          toggleMobileView(true);
        }
        
        // Mettre à jour le composant PdfViewer via événement personnalisé
        const updateEvent = new CustomEvent('updatePdfViewer', {
          detail: {
            pdfUrl: pdfUrl,
            documentTitle: getDocumentTitle(doc),
            isVisible: true,
            isMobile: isMobile()
          }
        });
        document.dispatchEvent(updateEvent);
        console.log('📡 Page - Événement updatePdfViewer envoyé:', updateEvent.detail);
      } else {
        console.log('❌ Page - Document invalide:', doc);
      }
    });

    // Gérer le redimensionnement de la fenêtre
    window.addEventListener('resize', () => {
      if (!isMobile() && isMobileViewerMode) {
        // Si on repasse en desktop, réinitialiser la vue
        toggleMobileView(false);
      }
    });

    function getDocumentTitle(doc: any) {
      if (doc.eventDate) {
        try {
          const d = new Date(doc.eventDate);
          return 'Compte rendu du ' + d.toLocaleDateString('fr-FR');
        } catch {}
      }
      return doc.name.replace('_readable.pdf', '').replace(/[-_]/g, ' ');
    }
  });
</script>

<style>
  .conseils-main {
    height: 100vh;
    overflow: hidden;
    padding: 0;
    margin: 0;
    background-color: #f9fafb;
  }

  /* Bandeau informatif - Style minimal utilisant les variables globales */
  .info-banner {
    background-color: var(--primary);
    color: var(--white);
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    position: relative;
    z-index: 10;
  }

  .banner-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 1200px;
    margin: 0 auto;
    gap: 1rem;
  }

  .banner-text {
    flex: 1;
    font-size: 1rem;
    line-height: 1.4;
  }

  .banner-text a {
    color: var(--accent);
    text-decoration: underline;
    font-weight: 500;
  }

  .banner-text a:hover {
    opacity: 0.8;
  }

  .banner-close {
    background: none;
    border: none;
    color: var(--white);
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.3rem;
    flex-shrink: 0;
    transition: background-color 0.2s ease;
  }

  .banner-close:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  /* Responsive pour le bandeau */
  @media (max-width: 768px) {
    .banner-content {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .banner-text {
      font-size: 0.9rem;
    }

    .banner-close {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
    }
  }

  .conseils-container {
    height: calc(100vh - 60px); /* Ajustement pour le bandeau */
    min-height: calc(100vh - 60px);
    display: flex;
    transition: all 0.3s ease;
  }

  /* Colonne arborescence */
  .arborescence-column {
    width: 25%;
    min-width: 300px;
    height: calc(100vh - 60px); /* Ajustement pour le bandeau */
    min-height: calc(100vh - 60px);
    transition: width 0.3s ease;
    overflow: hidden;
  }

  /* Colonne viewer */
  .viewer-column {
    width: 75%;
    height: calc(100vh - 60px); /* Ajustement pour le bandeau */
    min-height: calc(100vh - 60px);
    opacity: 1;
    transition: all 0.3s ease;
    overflow: hidden;
    background-color: white;
  }

  /* Responsive Desktop */
  @media (max-width: 1024px) {
    .arborescence-column {
      width: 30%;
      min-width: 250px;
    }

    .viewer-column {
      width: 70%;
    }
  }

  /* Responsive Mobile */
  @media (max-width: 768px) {
    .conseils-container {
      position: relative;
      overflow: hidden;
    }

    /* Par défaut mobile : arborescence visible, viewer caché */
    .arborescence-column {
      width: 100%;
      height: calc(100vh - 60px); /* Ajustement pour le bandeau */
      min-width: auto;
      position: relative;
      transform: translateX(0);
      transition: transform 0.3s ease;
    }

    .viewer-column {
      width: 100%;
      height: calc(100vh - 60px); /* Ajustement pour le bandeau */
      position: absolute;
      top: 0;
      left: 0;
      transform: translateX(100%); /* Hors écran à droite */
      transition: transform 0.3s ease;
    }

    /* Mode viewer mobile : arborescence cachée, viewer visible */
    .mobile-viewer-mode .arborescence-column.mobile-hidden {
      transform: translateX(-100%); /* Glisse vers la gauche */
    }

    .mobile-viewer-mode .viewer-column.mobile-visible {
      transform: translateX(0); /* Glisse pour être visible */
    }
  }

  /* Masquer la margin du main global pour cette page */
  :global(.conseils-main) {
    max-width: none !important;
    margin: 0 !important;
  }
</style>
