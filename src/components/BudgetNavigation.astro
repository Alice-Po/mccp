---
interface NavSubItem {
  id: string;
  label: string;
  icon: string;
  type: 'table-section' | 'accordion';
  openAccordion?: boolean;
}

interface NavItem {
  id: string;
  label: string;
  icon: string;
  type: 'table' | 'section' | 'accordion';
  children?: NavSubItem[];
}

const navItems: NavItem[] = [
  {
    id: 'section-fonctionnement',
    label: 'Section de fonctionnement',
    icon: 'â—¾',
    type: 'table',
    children: [
      {
        id: 'depenses-fonctionnement',
        label: 'DÃ©penses de fonctionnement',
        icon: 'âž¥',
        type: 'table-section'
      },
      {
        id: 'recettes-fonctionnement', 
        label: 'Recettes de fonctionnement',
        icon: 'âž¥',
        type: 'table-section'
      },
      {
        id: 'detail-depenses-fonctionnement',
        label: 'DÃ©tail des DÃ©penses de fonctionnement',
        icon: 'ðŸ“ˆ',
        type: 'accordion',
        openAccordion: true
      },
      {
        id: 'detail-recettes-fonctionnement',
        label: 'DÃ©tail des Recettes de fonctionnement', 
        icon: 'ðŸ“ˆ',
        type: 'accordion',
        openAccordion: true
      }
    ]
  },

  {
    id: 'section-investissement',
    label: 'Section d\'investissement',
    icon: 'â—¾',
    type: 'table',
     children: [
      {
        id: 'depenses-investissement',
        label: 'DÃ©penses d\'investissement',
        icon: 'âž¥',
        type: 'table-section'
      },
      {
        id: 'recettes-investissement', 
        label: 'Recettes d\'investissement',
        icon: 'âž¥',
        type: 'table-section'
      },
      {
        id: 'detail-depenses-investissement',
        label: 'DÃ©tail des DÃ©penses d\'investissement',
        icon: 'ðŸ“ˆ',
        type: 'accordion',
        openAccordion: true
      },
      {
        id: 'detail-recettes-investissement',
        label: 'DÃ©tail des Recettes d\'investissement', 
        icon: 'ðŸ“ˆ',
        type: 'accordion',
        openAccordion: true
      }
    ]
  }
];
---

<nav class="budget-navigation" id="budget-nav">
  <div class="nav-header">
    <h3>Navigation Budget</h3>
    <button class="nav-toggle" aria-label="Masquer/Afficher la navigation">
      <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
        <path d="M2 3h12a1 1 0 010 2H2a1 1 0 010-2zm0 4h12a1 1 0 010 2H2a1 1 0 010-2zm0 4h12a1 1 0 010 2H2a1 1 0 010-2z"/>
      </svg>
    </button>
  </div>
  
  <ul class="nav-list">
    {navItems.map((item) => (
      <li class="nav-item">
        <a 
          href={`#${item.id}`} 
          class={`nav-link nav-link--${item.type}`}
          data-target={item.id}
          data-level="parent"
        >
          <span class="nav-icon">{item.icon}</span>
          <span class="nav-label">{item.label}</span>
          {item.children && (
            <span class="nav-chevron">
              <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">
                <path d="M4.5 3L7.5 6L4.5 9" stroke="currentColor" stroke-width="1.5" fill="none"/>
              </svg>
            </span>
          )}
        </a>
        
        {item.children && (
          <ul class="nav-sublist">
            {item.children.map((subItem) => (
              <li class="nav-subitem">
                <a 
                  href={`#${subItem.id}`}
                  class={`nav-link nav-link--${subItem.type}`}
                  data-target={subItem.id}
                  data-level="child"
                  data-open-accordion={subItem.openAccordion ? 'true' : 'false'}
                >
                  <span class="nav-icon">{subItem.icon}</span>
                  <span class="nav-label">{subItem.label}</span>
                </a>
              </li>
            ))}
          </ul>
        )}
      </li>
    ))}
  </ul>
  
  <div class="nav-footer">
    <div class="nav-indicator">
      <div class="indicator-dot"></div>
      <span class="indicator-text">Section active</span>
    </div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const nav = document.getElementById('budget-nav');
    const navToggle = nav?.querySelector('.nav-toggle');
    const navLinks = nav?.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('[id^="section-"], [id^="detail-"], [id^="depenses-"], [id^="recettes-"]');
    
    // Configuration du smooth scroll
    const smoothScrollToTarget = (targetId: string) => {
      const target = document.getElementById(targetId);
      console.log('Searching for target:', targetId, 'Found:', target); // Debug log
      
      if (target) {
        // Si c'est une section de graphique, s'assurer que l'accordÃ©on est ouvert
        if (target.classList.contains('chart-section')) {
          const accordion = target.closest('.chart-accordion');
          if (accordion) {
            const header = accordion.querySelector('.accordion-header') as HTMLElement;
            const content = accordion.querySelector('.accordion-content') as HTMLElement;
            if (header && content && !content.classList.contains('open')) {
              header.click(); // Ouvrir l'accordÃ©on si fermÃ©
            }
          }
        }
        
        // Attendre un court instant pour que l'accordÃ©on s'ouvre si nÃ©cessaire
        setTimeout(() => {
          // Calculer la position avec un offset plus prÃ©cis
          let offsetTop = target.offsetTop;
          
          // Ajustement spÃ©cial pour les Ã©lÃ©ments de tableau et les graphiques
          if (target.classList.contains('chart-section') || target.tagName === 'TD' || target.closest('table')) {
            const rect = target.getBoundingClientRect();
            const bodyRect = document.body.getBoundingClientRect();
            offsetTop = rect.top + window.scrollY - 120; // 120px de compensation
          }
          
          console.log('Scrolling to position:', offsetTop); // Debug log
          
          window.scrollTo({
            top: offsetTop,
            behavior: 'smooth'
          });
        }, 100); // Court dÃ©lai pour laisser l'accordÃ©on s'ouvrir si nÃ©cessaire
      } else {
        console.error('Target not found:', targetId); // Debug log
      }
    };
    
    // Fonction pour ouvrir un accordÃ©on spÃ©cifique
    const openAccordion = (accordionId: string) => {
      // Chercher l'accordÃ©on qui contient l'Ã©lÃ©ment ciblÃ©
      const targetElement = document.getElementById(accordionId);
      if (targetElement) {
        // Trouver l'accordÃ©on parent le plus proche
        const accordionContainer = targetElement.closest('.chart-accordion');
        if (accordionContainer) {
          const accordion = accordionContainer.querySelector('.accordion-header') as HTMLElement;
          if (accordion) {
            const targetId = accordion.getAttribute('data-accordion-target');
            if (targetId) {
              const content = document.getElementById(targetId) as HTMLElement;
              const chevron = accordion.querySelector('.accordion-chevron') as HTMLElement;
              
              if (content && !content.classList.contains('open')) {
                content.classList.add('open');
                content.style.maxHeight = content.scrollHeight + 'px';
                accordion.setAttribute('aria-expanded', 'true');
                content.setAttribute('aria-hidden', 'false');
                if (chevron) chevron.style.transform = 'rotate(180deg)';
              }
            }
          }
        }
      }
    };
    
    // Gestion des clics sur les liens de navigation
    navLinks?.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('data-target');
        const shouldOpenAccordion = link.getAttribute('data-open-accordion') === 'true';
        
        if (targetId) {
          // Supprimer la classe active de tous les liens
          navLinks.forEach(l => l.classList.remove('active'));
          // Ajouter la classe active au lien cliquÃ©
          link.classList.add('active');
          
          // Scroll vers la section
          smoothScrollToTarget(targetId);
          
          // Ouvrir l'accordÃ©on si nÃ©cessaire
          if (shouldOpenAccordion) {
            setTimeout(() => {
              openAccordion(targetId);
            }, 500); // DÃ©lai pour permettre le scroll
          }
        }
      });
    });
    
    // Gestion du toggle de navigation
    navToggle?.addEventListener('click', () => {
      nav?.classList.toggle('collapsed');
    });
    
    // Intersection Observer pour dÃ©tecter la section active
    const observerOptions = {
      root: null,
      rootMargin: '-20% 0px -20% 0px',
      threshold: 0.1
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id;
          const correspondingLink = nav?.querySelector(`[data-target="${sectionId}"]`);
          
          if (correspondingLink) {
            navLinks?.forEach(l => l.classList.remove('active'));
            correspondingLink.classList.add('active');
          }
        }
      });
    }, observerOptions);
    
    // Observer toutes les sections
    sections.forEach(section => {
      observer.observe(section);
    });
  });
</script>

<style>
    li span {display: inline;}
  .budget-navigation {
    position: fixed;
    left: 2rem;
    top: 50%;
    transform: translateY(-50%);
    width: 320px;
    background: white;
    border-radius: 1rem;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    border: 2px solid rgba(46, 139, 87, 0.1);
    z-index: 100;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(10px);
    font-family: var(--font-main);
  }
  
  .budget-navigation.collapsed {
    width: 60px;
  }
  
  .nav-header {
    padding: 1.5rem;
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
    border-radius: 1rem 1rem 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
  }
  
  .nav-header h3 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
    opacity: 1;
    transition: opacity 0.3s ease;
  }
  
  .budget-navigation.collapsed .nav-header h3 {
    opacity: 0;
  }
  
  .nav-toggle {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: background-color 0.2s ease;
  }
  
  .nav-toggle:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .nav-list {
    list-style: none;
    padding: 1rem 0;
    margin: 0;
  }
  
  .nav-item {
    margin-bottom: 0.5rem;
  }
  
  .nav-link {
    display: flex;
    align-items: center;
    padding: 1rem 1.5rem;
    text-decoration: none;
    color: var(--secondary);
    transition: all 0.3s ease;
    border-left: 3px solid transparent;
    position: relative;
  }
  
  .nav-link:hover {
    background-color: rgba(46, 139, 87, 0.05);
    color: var(--primary);
    border-left-color: var(--primary);
  }
  
  .nav-link.active {
    background-color: rgba(46, 139, 87, 0.1);
    color: var(--primary);
    border-left-color: var(--primary);
    font-weight: 600;
  }
  
  .nav-link.active::after {
    content: '';
    position: absolute;
    right: 1rem;
    width: 8px;
    height: 8px;
    background-color: var(--primary);
    border-radius: 50%;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(46, 139, 87, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(46, 139, 87, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(46, 139, 87, 0);
    }
  }
  
  .nav-icon {
    font-size: 1.1rem;
    margin-right: 1rem;
    min-width: 20px;
    text-align: center;
  }
  
  .nav-label {
    font-size: 0.9rem;
    font-weight: 500;
    opacity: 1;
    transition: opacity 0.3s ease;
    white-space: nowrap;
    flex: 1;
  }
  
  .nav-chevron {
    margin-left: 0.5rem;
    opacity: 0.6;
    transition: transform 0.3s ease;
  }
  
  .budget-navigation.collapsed .nav-label,
  .budget-navigation.collapsed .nav-chevron {
    opacity: 0;
  }
  
  /* Styles pour les sous-listes */
  .nav-sublist {
    list-style: none;
    padding: 0;
    margin: 0;
    border-left: 2px solid rgba(46, 139, 87, 0.1);
    margin-left: 1.5rem;
  }
  
  .nav-subitem {
    margin-bottom: 0.25rem;
  }
  
  .nav-sublist .nav-link {
    padding: 0.75rem 1rem;
    font-size: 0.85rem;
    border-left: 2px solid transparent;
    position: relative;
  }
  
  .nav-sublist .nav-link .nav-icon {
    font-size: 1rem;
    margin-right: 0.75rem;
    min-width: 16px;
  }
  
  .nav-sublist .nav-link:hover {
    background-color: rgba(46, 139, 87, 0.03);
  }
  
  .nav-sublist .nav-link.active {
    background-color: rgba(46, 139, 87, 0.08);
    border-left-color: var(--primary);
  }
  
  .nav-link--table {
    border-left-width: 4px;
  }
  
  .nav-link--accordion .nav-icon {
    color: var(--primary);
  }
  
  .nav-link--table-section .nav-icon {
    color: var(--secondary);
  }
  
  .nav-footer {
    padding: 1rem 1.5rem;
    border-top: 1px solid rgba(46, 139, 87, 0.1);
  }
  
  .nav-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.8rem;
    color: var(--gray);
    opacity: 1;
    transition: opacity 0.3s ease;
  }
  
  .budget-navigation.collapsed .nav-indicator {
    opacity: 0;
  }
  
  .indicator-dot {
    width: 6px;
    height: 6px;
    background-color: var(--primary);
    border-radius: 50%;
    animation: blink 1.5s infinite;
  }
  
  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0.3; }
  }
  
  /* Responsive design */
  @media (max-width: 1600px) {
    .budget-navigation {
      left: 1rem;
      width: 300px;
    }
    
    .budget-navigation.collapsed {
      width: 55px;
    }
  }
  
  @media (max-width: 1400px) {
    .budget-navigation {
      display: none;
    }
  }
  
  /* Smooth scroll pour toute la page */
  :global(html) {
    scroll-behavior: smooth;
  }
</style>