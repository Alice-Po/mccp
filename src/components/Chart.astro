---
interface DonneeComptable {
  compte: string;
  libelle: string;
  montant_realise: number;
}

interface Props {
  data: DonneeComptable[];
  title: string;
  totalLabel: string;
  chartColors?: string[];
}

const { data, title, totalLabel, chartColors = [
  '#2e8b57', '#1b365d', '#ac502b', '#747474', '#e0e0e0', '#ff6b6b',
  '#9b59b6', '#e67e22', '#34495e', '#16a085', '#f39c12', '#e74c3c',
  '#3498db', '#95a5a6', '#d35400', '#8e44ad', '#27ae60', '#f1c40f',
  '#e91e63', '#607d8b'
] } = Astro.props;

// Générer un ID unique pour ce graphique
const chartId = `chart-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="chart-component-container">
  <div class="chart-container">
    <canvas id={chartId} aria-label={`Graphique en camembert ${title}`}></canvas>
  </div>
  
  <div class="chart-details">
    <h2>{title}</h2>
    
    <!-- Total en évidence - sera rempli par JavaScript -->
    <div class="total-display">
      <div class="total-content">
        <span class="total-label">{totalLabel}</span>
        <span class="total-amount" id={`total-${chartId}`}>Calcul en cours...</span>
      </div>
    </div>
    
    <!-- Liste des légendes - sera remplie par JavaScript -->
    <ul class="chart-legend" id={`legend-${chartId}`}>
      <li>Chargement des données...</li>
    </ul>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script define:vars={{ rawData: data, title, totalLabel, chartColors, chartId }}>
  let chartInstance = null;

  // Attendre que le DOM soit chargé
  window.addEventListener('load', () => {
    try {
      console.log('Données reçues:', rawData);
      
      // Traitement côté client : ajouter les couleurs et trier
      const dataWithColors = rawData.map((item, index) => ({
        ...item,
        color: chartColors[index % chartColors.length],
        originalIndex: index
      })).sort((a, b) => b.montant_realise - a.montant_realise);

      // Extraire les données pour Chart.js
      const labels = dataWithColors.map(item => item.libelle);
      const montants = dataWithColors.map(item => item.montant_realise);
      const sortedColors = dataWithColors.map(item => item.color);

      // Calculer le total
      const totalMontant = dataWithColors.reduce((total, item) => total + item.montant_realise, 0);

      // Mettre à jour le total dans le DOM
      const totalElement = document.getElementById(`total-${chartId}`);
      if (totalElement) {
        totalElement.textContent = `${totalMontant.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} €`;
      }

      // Mettre à jour la légende dans le DOM
      const legendElement = document.getElementById(`legend-${chartId}`);
      if (legendElement) {
        // Vider la liste
        legendElement.innerHTML = '';
        
        // Créer les éléments de légende avec les bonnes classes
        dataWithColors.forEach((item, index) => {
          const li = document.createElement('li');
          
          const colorDiv = document.createElement('div');
          colorDiv.className = 'legend-color';
          colorDiv.style.backgroundColor = item.color;
          
          const labelDiv = document.createElement('div');
          labelDiv.className = 'legend-label';
          labelDiv.textContent = item.libelle;
          
          const valueDiv = document.createElement('div');
          valueDiv.className = 'legend-value';
          valueDiv.textContent = `${item.montant_realise.toLocaleString('fr-FR')} €`;
          
          li.appendChild(colorDiv);
          li.appendChild(labelDiv);
          li.appendChild(valueDiv);
          
          legendElement.appendChild(li);
        });
      }

      // Créer le graphique
      const canvas = document.getElementById(chartId);
      if (!canvas) {
        console.error(`Canvas #${chartId} non trouvé`);
        return;
      }

      const ctx = canvas.getContext('2d');
      if (!ctx) {
        console.error('Contexte 2D du canvas non disponible');
        return;
      }

      chartInstance = new Chart(ctx, {
        type: 'pie',
        data: {
          labels: labels,
          datasets: [{
            label: title,
            data: montants,
            backgroundColor: sortedColors,
            borderWidth: 2,
            borderColor: '#ffffff',
            hoverBorderWidth: 4,
            hoverBorderColor: '#333333'
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              display: false
            },
            title: {
              display: true,
              text: title,
              font: {
                family: 'League Spartan',
                size: 20,
                weight: 'bold'
              },
              padding: 20
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  let label = context.label || '';
                  let value = Number(context.raw) || 0;
                  return `${label}: ${value.toFixed(2)} €`;
                }
              }
            }
          }
        }
      });

      // Ajouter les interactions avec la sidebar
      const legendItems = legendElement.querySelectorAll('li');
      legendItems.forEach((item, index) => {
        item.addEventListener('mouseenter', () => {
          chartInstance.setActiveElements([{
            datasetIndex: 0,
            index: index
          }]);
          chartInstance.update('none');
          item.classList.add('legend-hover');
        });

        item.addEventListener('mouseleave', () => {
          chartInstance.setActiveElements([]);
          chartInstance.update('none');
          item.classList.remove('legend-hover');
        });
      });

    } catch (error) {
      console.error('Erreur lors de la création du graphique:', error);
    }
  });
</script>

<style>
  .chart-component-container {
    width: 100%;
    margin: 0;
    padding: 0 2rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto auto;
    gap: 3rem;
    align-items: start;
  }
  
  .chart-container {
    background: white;
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    width: 100%;
    grid-column: 1;
    grid-row: 1;
  }
  
  .chart-details {
    background: white;
    padding: 1.5rem;
    border-radius: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    width: 100%;
    grid-column: 2;
    grid-row: 1 / 3;
    display: flex;
    flex-direction: column;
    max-height: calc(100vh - 200px);
    overflow: hidden;
  }
  
  .chart-legend {
    list-style: none;
    padding: 0;
    margin: 0;
    overflow-y: auto;
    flex: 1;
    /* Scroll discret et stylé */
    scrollbar-width: thin;
    scrollbar-color: rgba(46, 139, 87, 0.3) transparent;
  }
  
  /* Styles pour le scrollbar sur Webkit (Chrome, Safari) */
  .chart-legend::-webkit-scrollbar {
    width: 6px;
  }
  
  .chart-legend::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .chart-legend::-webkit-scrollbar-thumb {
    background-color: rgba(46, 139, 87, 0.3);
    border-radius: 3px;
    transition: background-color 0.2s ease;
  }
  
  .chart-legend::-webkit-scrollbar-thumb:hover {
    background-color: rgba(46, 139, 87, 0.5);
  }
  
  /* Styles globaux pour les éléments créés dynamiquement */
  :global(.chart-legend li) {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
    padding: 0.75rem;
    border-radius: 0.4rem;
    background: #f8f9fa;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  :global(.chart-legend li:hover),
  :global(.chart-legend li.legend-hover) {
    background: #e9ecef;
    transform: translateX(3px);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
  }
  
  :global(.legend-color) {
    width: 18px;
    height: 18px;
    border-radius: 50%;
    margin-right: 1rem;
    transition: transform 0.2s ease;
    flex-shrink: 0;
  }
  
  :global(.chart-legend li:hover .legend-color),
  :global(.chart-legend li.legend-hover .legend-color) {
    transform: scale(1.15);
  }
  
  :global(.legend-label) {
    flex: 1;
    font-weight: 500;
    color: #495057;
    font-size: 0.9rem;
    margin-right: 0.75rem;
    line-height: 1.3;
  }
  
  :global(.legend-value) {
    font-weight: 600;
    color: #2e8b57;
    font-size: 0.95rem;
    text-align: right;
    min-width: 110px;
  }
  
  h2 {
    margin-bottom: 1.5rem;
    font-size: 1.3rem;
    flex-shrink: 0;
  }
  
  /* Styles pour le total des dépenses */
  .total-display {
    background: linear-gradient(135deg, #2e8b57 0%, #1b5e39 100%);
    border-radius: 0.75rem;
    padding: 1rem;
    box-shadow: 0 4px 15px rgba(46, 139, 87, 0.2);
    text-align: center;
    margin-bottom: 1rem;
    flex-shrink: 0;
  }
  
  .total-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .total-label {
    color: rgba(255, 255, 255, 0.9);
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.3px;
  }
  
  .total-amount {
    color: white;
    font-size: 1.4rem;
    font-weight: 700;
    font-family: 'League Spartan', sans-serif;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  }
</style>
